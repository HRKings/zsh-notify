# vim: set nowrap filetype=zsh:
#
# Functions shared by the mac and linux implementations.

# Exit with 0 if inside a TMUX pane
function is-inside-tmux {
	[[ "$TMUX" != "" ]]
}

# Find the TTY for the current shell, also accounting for TMUX.
function current-tty {
	if is-inside-tmux; then
		tmux display-message -p '#{client_tty}'
	else
		echo $TTY
	fi
}

# Exit with 0 if given TMUX pane is the active one.
function is-current-tmux-pane-active {
	is-inside-tmux || return 1

	local active_pane_id=$(tmux list-windows -F '#{window_active} #{pane_id}' | rg -i '^1' | choose 1)

	if [[ "$TMUX_PANE" == "$active_pane_id" ]]; then
		return 0
	fi

	return 1
}

# Retrieve the format template from zstyle by type from first argument (one of 'success' or 'error')
# and replace every #{placeholder} from key/value pairs passed in the rest of arguments
function notification-format {
	local result k v

	result="$1"
	shift

	while [[ $# -gt 0 ]]; do
		k="$1"
		v="$2"
		result=$(echo "$result" | sd "#\{$k\}" "$v")
		shift
		shift
	done

	echo $result
}

# format-time takes a number of seconds as first argument and format it
# as Xs, XX:XX or XX:XX:XX
function format-time() {
	local format t
	t="$1"

	if [[ "$t" -lt 60 ]]; then
		zstyle -s ':notify:*' time-only-seconds format
	elif [[ "$t" -lt 3600 ]]; then
		zstyle -s ':notify:*' time-with-minutes format
	else
		zstyle -s ':notify:*' time-with-hours format
	fi

	zmodload -e zsh/datetime || zmodload zsh/datetime
	TZ=UTC strftime "$format" "$t"
}
